// 1 space indent due to openplanet preprocessor
#Const C_PageUID "CHRaceStats"
#Include "TextLib" as TL
#Include "TimeLib" as TimeLib

declare Text G_PreviousMapUid;

// logging function, should be "MLHook_LogMe_" + PageUID
Void MLHookLog(Text _Msg) {
    SendCustomEvent("MLHook_LogMe_" ^ C_PageUID, [_Msg]);
}


Integer GetBestRaceTime(CSmPlayer Player) {
    if (Player == Null || Player.Score == Null) return -1;
    declare BrCount = Player.Score.BestRaceTimes.count;
    if (BrCount == 0) return -1;
    declare BrTime = Player.Score.BestRaceTimes[BrCount - 1];
    return BrTime;
}


// send players best times
Void _SendPlayerTimes(CSmPlayer Player) {
    if (Player.Score == Null) return;
    if(Player.Score.BestRaceTimes.count == 0) return;
    declare Name = Player.User.Name;
    declare UId = "" ^ Player.User.WebServicesUserId;
    declare Timestamp = TimeLib::GetCurrent();
    declare BestTimes = "" ^ Player.Score.BestRaceTimes[Player.Score.BestRaceTimes.count - 1];
	declare MapId = Map.MapInfo.MapUid;

    SendCustomEvent("MLHook_Event_" ^ C_PageUID ^ "_NewRecord", [Name, UId, Timestamp, BestTimes, MapId]);
}

Void _SendPlayerTimesCSV(CSmPlayer Player) {

}


// we only want to send info when a player's CP count changes.
declare Integer[Text] LastBestTimes;

Boolean _SendPlayerStats(CSmPlayer Player, Boolean Force) {
    if (Player == Null || Player.Score == Null || Player.User == Null) return False;
    declare Text Name = Player.User.Name;
    declare BestTime = GetBestRaceTime(Player);

    // check for changes
    declare Boolean BestTimeChanged = !LastBestTimes.existskey(Name) || BestTime != LastBestTimes[Name];
  
     // update if there are changes or the update is forced.
    declare Boolean WillSendEvent = Force || BestTimeChanged;
    if (Force || WillSendEvent) {
        _SendPlayerTimes(Player);
    }
    // update last spawn and cp count always
    LastBestTimes[Name] = BestTime;
    return WillSendEvent;
}

Void CSVSend() {
    MLHookLog("Started: CSVSend");

    declare Text temp = "";

    foreach (Player in Players) {
        if (Player.Score == Null) continue;
        if(Player.Score.BestRaceTimes.count == 0) continue;
        declare Name = Player.User.Name;
        declare Timestamp = TimeLib::GetCurrent();
        declare BestTimes = "" ^ Player.Score.BestRaceTimes[Player.Score.BestRaceTimes.count - 1];
	    declare MapId = Map.MapInfo.MapUid;  

        temp = temp ^ Name ^ ";" ^ BestTimes ^ "\n"; 
    }
    SendCustomEvent("MLHook_Event_" ^ C_PageUID ^ "_CSVRecords", [temp]);
    MLHookLog("Completed: CSVSend");
}


// to start with we want to send all data.
Void InitialSend() {
    foreach (Player in Players) {
        _SendPlayerStats(Player, True);
    }
    MLHookLog("Completed: InitialSend");
}

Void CheckPlayers() {
    declare Integer c = 0;
    foreach (Player in Players) {
        if (_SendPlayerStats(Player, False)) {
            c += 1;
        }
    }
}

Void CheckMapChange() {
        if (Map != Null && Map.MapInfo.MapUid != G_PreviousMapUid) {
        G_PreviousMapUid = Map.MapInfo.MapUid;
        LastBestTimes = [];
         SendCustomEvent("MLHook_Event_" ^ C_PageUID ^ "_MapChange", [G_PreviousMapUid]);
    } 
}




Void CheckIncoming() {
    declare Text[][] MLHook_Inbound_CHRaceStats for ClientUI;
    foreach (Event in MLHook_Inbound_CHRaceStats) {
        if (Event[0] == "SendAllPlayerStates") {
            InitialSend();
        }
        else if (Event[0] == "SendCSV") {		
            CSVSend();
        } else {
            MLHookLog("Skipped unknown incoming event: " ^ Event);
            continue;
        }
        MLHookLog("Processed Incoming Event: "^Event[0]);
    }
    MLHook_Inbound_CHRaceStats = [];
}

main() {
    declare Integer LoopCounter = 0;
    MLHookLog("Starting CHRaceStatsFeed");
    while (Players.count == 0) {
        yield;
    }
    MLHookLog("CHRaceStatsFeed got init players");
    yield;
    yield;
    yield;
    yield;
    InitialSend();
    MLHookLog("CHRaceStatsFeed did initial send");
    declare Integer StartTime = 0;
    declare Integer Delta = 0;
    while (True) {
        yield;        
        CheckMapChange();
        CheckPlayers();
        LoopCounter += 1;
        if (LoopCounter % 60 == 20) {
              CheckIncoming();            
        }
    }
}
